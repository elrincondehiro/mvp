---
// CartItem.astro
import type { CartItem } from '@/lib/cartStore';
import AddToCartBtn from '@/components/AddToCartBtn.astro';

interface Props {
  item: CartItem
}

const { item } = Astro.props;
export const prerender = true;
---

<div class="cart-item-container p-4 border rounded-lg shadow-sm">
  <div class="flex gap-4">
    <div class="w-24 h-24">
      <img 
        src={item.imageSrc} 
        alt={item.name}
        class="w-full h-full object-cover rounded-md"
      />
    </div>
    
    <div class="flex-1">
      <input 
        type="text"
        id="productName"
        name="productName"
        value={item.name}
        class="text-lg font-semibold w-full p-1 border rounded"
      />
      <p class="text-gray-600">Precio: {item.price.toFixed(2)}€</p>
      
      <div class="mt-2 flex items-center gap-2">
        <label for="quantity" class="text-sm">Cantidad:</label>
        <input 
          type="number"
          id="quantity"
          name="quantity"
          value="1"
          class="w-20 p-1 border rounded"
        />
      </div>
      
      <div class="mt-3">
        <AddToCartBtn  item={item} />
      </div>
    </div>
  </div>
</div>

<script>
  // Manejamos la lógica del lado del cliente
  const quantityInput = document.querySelector('input[name="quantity"]') as HTMLInputElement;
  const productNameInput = document.querySelector('input[name="productName"]') as HTMLInputElement;
  const addToCartBtn = document.querySelector('#addToCartButton') as HTMLElement;
  if (quantityInput && addToCartBtn && productNameInput) {

    const updateCartItem = () => {
      addToCartBtn.dataset.productQty = quantityInput.value;
      addToCartBtn.dataset.productName = productNameInput.value;
    }

    quantityInput.addEventListener('change', updateCartItem);
    productNameInput.addEventListener('change', updateCartItem);
    // Actualizamos el item cuando cambia la cantidad
    // quantityInput.addEventListener('change', (e) => {
    //   const newQuantity = parseInt((e.target as HTMLInputElement).value);
    //   console.log(newQuantity);
    //   // Actualizamos el componente AddToCartBtn con la nueva cantidad
    //   const currentItem = JSON.parse(addToCartBtn.dataset.productQty || '{}');
    //   console.log(currentItem);
    //   // currentItem = newQuantity;
      
    //   // Actualizamos las props del componente
    //   addToCartBtn.dataset.productQty = JSON.stringify(newQuantity);
    // });
  }
</script>